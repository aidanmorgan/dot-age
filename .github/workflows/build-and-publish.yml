name: Build, Test, and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion to work correctly

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Set locale
      run: |
        sudo apt-get update
        sudo apt-get install -y locales
        sudo locale-gen en_US.UTF-8
        echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV
        echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
        echo "LANGUAGE=en_US.UTF-8" >> $GITHUB_ENV
        echo "LC_CTYPE=en_US.UTF-8" >> $GITHUB_ENV

    - name: Install expect
      run: sudo apt install -y expect

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.12.0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.12.0
      with:
        useConfigFile: true

    - name: Display GitVersion outputs
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"

    - name: Set Version Environment Variables
      run: |
        echo "DOT_AGE_VERSION=${{ steps.gitversion.outputs.nuGetVersion }}" >> $GITHUB_ENV
        echo "DOT_AGE_SEMVER=${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_ENV
        echo "DOT_AGE_FULL_SEMVER=${{ steps.gitversion.outputs.fullSemVer }}" >> $GITHUB_ENV
        echo "DOT_AGE_SHA=${{ steps.gitversion.outputs.sha }}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_ENV

    - name: Update nuspec version
      run: |
        # Debug: Show current directory and file existence
        echo "Current directory: $(pwd)"
        echo "Checking if nuspec file exists:"
        ls -la DotAge/DotAge.Core/DotAge.Core.nuspec || echo "File not found!"
        
        # Update version in nuspec file
        VERSION="${{ env.DOT_AGE_VERSION }}"
        echo "Using version: $VERSION"
        sed -i "s/<version>.*<\/version>/<version>$VERSION<\/version>/" DotAge/DotAge.Core/DotAge.Core.nuspec
        echo "Updated nuspec version to $VERSION"
        
        # Verify the update
        echo "Verifying nuspec file:"
        grep "<version>" DotAge/DotAge.Core/DotAge.Core.nuspec

    - name: Update VersionInfo.cs
      run: |
        # Debug: Show current directory and file existence
        echo "Current directory: $(pwd)"
        echo "Checking if VersionInfo.cs file exists:"
        ls -la DotAge/DotAge.Core/VersionInfo.cs || echo "File not found!"
        
        # Set variables for clarity
        VERSION="${{ env.DOT_AGE_SEMVER }}"
        FULL_VERSION="${{ env.DOT_AGE_FULL_SEMVER }}"
        BUILD_DATE="${{ env.BUILD_DATE }}"
        COMMIT_HASH="${{ env.DOT_AGE_SHA }}"
        
        echo "Using version: $VERSION"
        echo "Using full version: $FULL_VERSION"
        echo "Using build date: $BUILD_DATE"
        echo "Using commit hash: $COMMIT_HASH"
        
        # Update VersionInfo.cs with version information
        cat > DotAge/DotAge.Core/VersionInfo.cs << EOF
        namespace DotAge.Core;

        /// <summary>
        ///     Provides version information for the DotAge library.
        ///     This file is automatically updated by the GitHub Actions build process.
        /// </summary>
        public class VersionInfo
        {
            /// <summary>
            ///     The semantic version (e.g., "1.0.0").
            /// </summary>
            public static readonly string Version = "$VERSION";
            
            /// <summary>
            ///     The full semantic version including pre-release tags (e.g., "1.0.0-beta.1").
            /// </summary>
            public static readonly string FullVersion = "$FULL_VERSION";
            
            /// <summary>
            ///     The build date in YYYY-MM-DD format.
            /// </summary>
            public static readonly string Date = "$BUILD_DATE";
            
            /// <summary>
            ///     The Git commit hash.
            /// </summary>
            public static readonly string CommitHash = "$COMMIT_HASH";
        }
        EOF
        
        echo "Updated VersionInfo.cs with version $VERSION, full version $FULL_VERSION, date $BUILD_DATE, and commit $COMMIT_HASH"
        
        # Verify the update
        echo "Verifying VersionInfo.cs file:"
        head -10 DotAge/DotAge.Core/VersionInfo.cs

    - name: Restore dependencies
      run: dotnet restore DotAge/DotAge.sln

    - name: Install age and age-keygen
      run: |
        # Get the latest release version
        AGE_VERSION=$(curl -s https://api.github.com/repos/FiloSottile/age/releases/latest | grep '"tag_name"' | sed -E 's/.*"tag_name": "v([^"]+)".*/\1/')
        echo "Installing age version $AGE_VERSION"

        # Download the appropriate binary for Linux
        curl -L https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-linux-amd64.tar.gz -o age.tar.gz

        # Extract the binaries
        tar -xvf age.tar.gz

        # Install to /usr/local/bin
        sudo mv age/age /usr/local/bin/
        sudo mv age/age-keygen /usr/local/bin/

        # Make them executable
        sudo chmod +x /usr/local/bin/age
        sudo chmod +x /usr/local/bin/age-keygen

        # Verify installation
        age --version
        age-keygen --version

    - name: Install rage and rage-keygen
      run: |
        # Get the latest release version
        RAGE_VERSION=$(curl -s https://api.github.com/repos/str4d/rage/releases/latest | grep '"tag_name"' | sed -E 's/.*"tag_name": "v([^"]+)".*/\1/')
        echo "Installing rage version $RAGE_VERSION"

        # Download the appropriate binary for Linux
        curl -L https://github.com/str4d/rage/releases/download/v${RAGE_VERSION}/rage-v${RAGE_VERSION}-x86_64-linux.tar.gz -o rage.tar.gz

        # Extract the binaries
        tar -xvf rage.tar.gz

        # Install to /usr/local/bin
        sudo mv rage/rage /usr/local/bin/
        sudo mv rage/rage-keygen /usr/local/bin/

        # Make them executable
        sudo chmod +x /usr/local/bin/rage
        sudo chmod +x /usr/local/bin/rage-keygen

        # Verify installation
        rage --version
        rage-keygen --version


        
    - name: Build
      run: dotnet build DotAge/DotAge.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test DotAge/DotAge.sln --configuration Release --no-build --verbosity normal

    - name: Package
      run: |
        cd DotAge/DotAge.Core
        dotnet pack -c Release /p:NuspecFile=DotAge.Core.nuspec

    - name: Upload NuGet package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: DotAge/DotAge.Core/bin/Release/DotAge.${{ env.DOT_AGE_VERSION }}.nupkg

    - name: Publish to NuGet
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        dotnet nuget push DotAge/DotAge.Core/bin/Release/DotAge.${{ env.DOT_AGE_VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
